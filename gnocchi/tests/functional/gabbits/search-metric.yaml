#
# Test the search API to achieve coverage of just the
# SearchController and SearchMetricController class code.
#

fixtures:
    - ConfigFixture

defaults:
  request_headers:
    # User foobar
    authorization: "basic Zm9vYmFyOg=="
    content-type: application/json

tests:
    - name: create archive policy
      desc: for later use
      POST: /v1/archive_policy
      request_headers:
        # User admin
        authorization: "basic YWRtaW46"
      data:
        name: high
        definition:
            - granularity: 1 second
              timespan: 1 hour
            - granularity: 2 second
              timespan: 1 hour
      response_headers:
          location: $SCHEME://$NETLOC/v1/archive_policy/high
      status: 201

    - name: create metric
      POST: /v1/metric
      data:
        archive_policy_name: high
      status: 201

    - name: post measures
      desc: for later use
      POST: /v1/batch/metrics/measures
      data:
        $RESPONSE['$.id']:
            - timestamp: "2014-10-06T14:34:12"
              value: 12
            - timestamp: "2014-10-06T14:34:14"
              value: 12
            - timestamp: "2014-10-06T14:34:16"
              value: 12
            - timestamp: "2014-10-06T14:34:18"
              value: 12
            - timestamp: "2014-10-06T14:34:20"
              value: 12
            - timestamp: "2014-10-06T14:34:22"
              value: 12
            - timestamp: "2014-10-06T14:34:24"
              value: 12
            - timestamp: "2014-10-06T14:34:26"
              value: 12
            - timestamp: "2014-10-06T14:34:28"
              value: 12
            - timestamp: "2014-10-06T14:34:30"
              value: 12
            - timestamp: "2014-10-06T14:34:32"
              value: 12
            - timestamp: "2014-10-06T14:34:34"
              value: 12
      status: 202

    - name: get metric id
      GET: /v1/metric
      status: 200
      response_json_paths:
          $[0].archive_policy.name: high

    - name: search with one correct granularity
      POST: /v1/search/metric?metric_id=$HISTORY['get metric id'].$RESPONSE['$[0].id']&granularity=1s
      data:
          "=": 12
      status: 200

    - name: search with multiple correct granularities
      POST: /v1/search/metric?metric_id=$HISTORY['get metric id'].$RESPONSE['$[0].id']&granularity=1second&granularity=2s
      data:
          "=": 12
      status: 200

    - name: search with correct and incorrect granularities
      POST: /v1/search/metric?metric_id=$HISTORY['get metric id'].$RESPONSE['$[0].id']&granularity=1s&granularity=300
      data:
          "=": 12
      status: 400
      request_headers:
          accept: application/json
      response_json_paths:
          $.description.cause: Aggregation does not exist
          $.description.detail.granularity: 300
          $.description.detail.aggregation_method: mean


    - name: search with incorrect granularity
      POST: /v1/search/metric?metric_id=$HISTORY['get metric id'].$RESPONSE['$[0].id']&granularity=300
      data:
          "=": 12
      status: 400
      request_headers:
          accept: application/json
      response_json_paths:
          $.description.cause: Aggregation does not exist
          $.description.detail.granularity: 300
          $.description.detail.aggregation_method: mean

    - name: search measure with wrong start
      POST: /v1/search/metric?metric_id=$HISTORY['get metric id'].$RESPONSE['$[0].id']&start=foobar
      data:
        ∧:
          - ≥: 1000
      status: 400
      response_strings:
        - Invalid value for start

    - name: create metric 2
      POST: /v1/metric
      data:
        archive_policy_name: "high"
      status: 201

    - name: search measure with wrong stop
      POST: /v1/search/metric?metric_id=$RESPONSE['$.id']&stop=foobar
      data:
        ∧:
          - ≥: 1000
      status: 400
      response_strings:
        - Invalid value for stop
