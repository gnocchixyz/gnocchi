fixtures:
    - ConfigFixture

defaults:
  request_headers:
    content-type: application/json
    # User foobar
    authorization: "basic Zm9vYmFyOg=="

tests:
    - name: create archive policy
      desc: for later use
      POST: /v1/archive_policy
      request_headers:
        # User admin
        authorization: "basic YWRtaW46"
      data:
          name: low
          definition:
              - granularity: 1 second
              - granularity: 300 seconds
      status: 201

# Aggregation by metric ids

    - name: create metric 1
      POST: /v1/metric
      request_headers:
          content-type: application/json
      data:
        archive_policy_name: low
      status: 201

    - name: create metric 2
      POST: /v1/metric
      request_headers:
          content-type: application/json
      data:
        archive_policy_name: low
      status: 201

    - name: get metric list
      GET: /v1/metric

    - name: push measurements to metric 1
      POST: /v1/metric/$RESPONSE['$[0].id']/measures
      request_headers:
           content-type: application/json
      data:
          - timestamp: "2015-03-06T14:33:57"
            value: 43.1
          - timestamp: "2015-03-06T14:34:12"
            value: 12
      status: 202

    - name: push measurements to metric 2
      POST: /v1/metric/$HISTORY['get metric list'].$RESPONSE['$[1].id']/measures
      request_headers:
           content-type: application/json
      data:
          - timestamp: "2015-03-06T14:33:57"
            value: 3.1
          - timestamp: "2015-03-06T14:34:12"
            value: 2
          - timestamp: "2015-03-06T14:35:12"
            value: 5
      status: 202

    - name: get measure aggregates by granularity not float
      GET: /v1/aggregation/metric?metric=$HISTORY['get metric list'].$RESPONSE['$[0].id']&metric=$HISTORY['get metric list'].$RESPONSE['$[1].id']&granularity=foobar
      status: 400

    - name: get measure aggregates by granularity with refresh
      GET: /v1/aggregation/metric?metric=$HISTORY['get metric list'].$RESPONSE['$[0].id']&metric=$HISTORY['get metric list'].$RESPONSE['$[1].id']&granularity=1&refresh=true
      response_json_paths:
        $:
          - ['2015-03-06T14:33:57+00:00', 1.0, 23.1]
          - ['2015-03-06T14:34:12+00:00', 1.0, 7.0]

    - name: get measure aggregates by granularity
      GET: /v1/aggregation/metric?metric=$HISTORY['get metric list'].$RESPONSE['$[0].id']&metric=$HISTORY['get metric list'].$RESPONSE['$[1].id']&granularity=1
      poll:
          count: 10
          delay: 1
      response_json_paths:
        $:
          - ['2015-03-06T14:33:57+00:00', 1.0, 23.1]
          - ['2015-03-06T14:34:12+00:00', 1.0, 7.0]

    - name: get measure aggregates by granularity with timestamps
      GET: /v1/aggregation/metric?metric=$HISTORY['get metric list'].$RESPONSE['$[0].id']&metric=$HISTORY['get metric list'].$RESPONSE['$[1].id']&start=2015-03-06T15:33:57%2B01:00&stop=2015-03-06T15:34:00%2B01:00
      poll:
          count: 10
          delay: 1
      response_json_paths:
        $:
          - ['2015-03-06T14:30:00+00:00', 300.0, 15.05]
          - ['2015-03-06T14:33:57+00:00', 1.0, 23.1]

    - name: get measure aggregates and reaggregate
      GET: /v1/aggregation/metric?metric=$HISTORY['get metric list'].$RESPONSE['$[0].id']&metric=$HISTORY['get metric list'].$RESPONSE['$[1].id']&reaggregation=min
      poll:
          count: 10
          delay: 1
      response_json_paths:
        $:
          - ['2015-03-06T14:30:00+00:00', 300.0, 2.55]
          - ['2015-03-06T14:33:57+00:00', 1.0, 3.1]
          - ['2015-03-06T14:34:12+00:00', 1.0, 2.0]

    - name: get measure aggregates and resample
      GET: /v1/aggregation/metric?metric=$HISTORY['get metric list'].$RESPONSE['$[0].id']&metric=$HISTORY['get metric list'].$RESPONSE['$[1].id']&granularity=1&resample=60
      response_json_paths:
        $:
          - ['2015-03-06T14:33:00+00:00', 60.0, 23.1]
          - ['2015-03-06T14:34:00+00:00', 60.0, 7.0]

    - name: get measure aggregates with fill zero
      GET: /v1/aggregation/metric?metric=$HISTORY['get metric list'].$RESPONSE['$[0].id']&metric=$HISTORY['get metric list'].$RESPONSE['$[1].id']&granularity=1&fill=0
      response_json_paths:
        $:
          - ['2015-03-06T14:33:57+00:00', 1.0, 23.1]
          - ['2015-03-06T14:34:12+00:00', 1.0, 7.0]
          - ['2015-03-06T14:35:12+00:00', 1.0, 2.5]

    - name: get measure aggregates with fill null
      GET: /v1/aggregation/metric?metric=$HISTORY['get metric list'].$RESPONSE['$[0].id']&metric=$HISTORY['get metric list'].$RESPONSE['$[1].id']&granularity=1&fill=null
      response_json_paths:
        $:
          - ['2015-03-06T14:33:57+00:00', 1.0, 23.1]
          - ['2015-03-06T14:34:12+00:00', 1.0, 7.0]
          - ['2015-03-06T14:35:12+00:00', 1.0, 5.0]

    - name: get measure aggregates with fill missing granularity
      GET: /v1/aggregation/metric?metric=$HISTORY['get metric list'].$RESPONSE['$[0].id']&metric=$HISTORY['get metric list'].$RESPONSE['$[1].id']&fill=0
      status: 400

    - name: get measure aggregates with bad fill
      GET: /v1/aggregation/metric?metric=$HISTORY['get metric list'].$RESPONSE['$[0].id']&metric=$HISTORY['get metric list'].$RESPONSE['$[1].id']&granularity=1&fill=asdf
      status: 400

    - name: get measure aggregates non existing granularity
      desc: https://github.com/gnocchixyz/gnocchi/issues/148
      GET: /v1/aggregation/metric?metric=$HISTORY['get metric list'].$RESPONSE['$[0].id']&granularity=42
      status: 404
      response_strings:
        - Granularity '42.0' for metric

# Aggregation by resource and metric_name

    - name: post a resource
      POST: /v1/resource/generic
      data:
          id: bcd3441c-b5aa-4d1b-af9a-5a72322bb269
          metrics:
            agg_meter:
                archive_policy_name: low
      status: 201

    - name: post another resource
      POST: /v1/resource/generic
      data:
          id: 1b0a8345-b279-4cb8-bd7a-2cb83193624f
          metrics:
            agg_meter:
                archive_policy_name: low
      status: 201

    - name: push measurements to resource 1
      POST: /v1/resource/generic/bcd3441c-b5aa-4d1b-af9a-5a72322bb269/metric/agg_meter/measures
      data:
          - timestamp: "2015-03-06T14:33:57"
            value: 43.1
          - timestamp: "2015-03-06T14:34:12"
            value: 12
      status: 202

    - name: push measurements to resource 2
      POST: /v1/resource/generic/1b0a8345-b279-4cb8-bd7a-2cb83193624f/metric/agg_meter/measures
      data:
          - timestamp: "2015-03-06T14:33:57"
            value: 3.1
          - timestamp: "2015-03-06T14:34:12"
            value: 2
          - timestamp: "2015-03-06T14:35:12"
            value: 5
      status: 202

    - name: get measure aggregates by granularity from resources with refresh
      POST: /v1/aggregation/resource/generic/metric/agg_meter?granularity=1&refresh=true
      response_json_paths:
        $:
          - ['2015-03-06T14:33:57+00:00', 1.0, 23.1]
          - ['2015-03-06T14:34:12+00:00', 1.0, 7.0]

    - name: get measure aggregates by granularity from resources
      POST: /v1/aggregation/resource/generic/metric/agg_meter?granularity=1
      poll:
          count: 10
          delay: 1
      response_json_paths:
        $:
          - ['2015-03-06T14:33:57+00:00', 1.0, 23.1]
          - ['2015-03-06T14:34:12+00:00', 1.0, 7.0]

    - name: get measure aggregates by granularity from resources and resample
      POST: /v1/aggregation/resource/generic/metric/agg_meter?granularity=1&resample=60
      response_json_paths:
        $:
          - ['2015-03-06T14:33:00+00:00', 60.0, 23.1]
          - ['2015-03-06T14:34:00+00:00', 60.0, 7.0]

    - name: get measure aggregates by granularity from resources and bad resample
      POST: /v1/aggregation/resource/generic/metric/agg_meter?resample=abc
      status: 400

    - name: get measure aggregates by granularity from resources and resample no granularity
      POST: /v1/aggregation/resource/generic/metric/agg_meter?resample=60
      status: 400
      response_strings:
        - A granularity must be specified to resample

    - name: get measure aggregates by granularity with timestamps from resources
      POST: /v1/aggregation/resource/generic/metric/agg_meter?start=2015-03-06T15:33:57%2B01:00&stop=2015-03-06T15:34:00%2B01:00
      poll:
          count: 10
          delay: 1
      response_json_paths:
        $:
          - ['2015-03-06T14:30:00+00:00', 300.0, 15.05]
          - ['2015-03-06T14:33:57+00:00', 1.0, 23.1]

    - name: get measure aggregates by granularity from resources and reaggregate
      POST: /v1/aggregation/resource/generic/metric/agg_meter?granularity=1&reaggregation=min
      poll:
          count: 10
          delay: 1
      response_json_paths:
        $:
          - ['2015-03-06T14:33:57+00:00', 1.0, 3.1]
          - ['2015-03-06T14:34:12+00:00', 1.0, 2.0]

    - name: get measure aggregates from resources with fill zero
      POST: /v1/aggregation/resource/generic/metric/agg_meter?granularity=1&fill=0
      response_json_paths:
        $:
          - ['2015-03-06T14:33:57+00:00', 1.0, 23.1]
          - ['2015-03-06T14:34:12+00:00', 1.0, 7.0]
          - ['2015-03-06T14:35:12+00:00', 1.0, 2.5]


# Some negative tests

    - name: get measure aggregates with wrong GET
      GET: /v1/aggregation/resource/generic/metric/agg_meter
      status: 405

    - name: get measure aggregates with wrong metric_name
      POST: /v1/aggregation/resource/generic/metric/notexists
      status: 200
      response_json_paths:
        $.`len`: 0

    - name: get measure aggregates with wrong resource
      POST: /v1/aggregation/resource/notexits/metric/agg_meter
      status: 404
      response_strings:
          - Resource type notexits does not exist

    - name: get measure aggregates with wrong path
      POST: /v1/aggregation/re/generic/metric/agg_meter
      status: 404

    - name: get measure aggregates with wrong path 2
      POST: /v1/aggregation/resource/generic/notexists/agg_meter
      status: 404

    - name: get measure aggregates with no resource name
      POST: /v1/aggregation/resource/generic/metric
      status: 405
