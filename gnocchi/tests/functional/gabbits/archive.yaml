#
# Test the Archive Policy API to achieve coverage of just the
# ArchivePoliciesController.
#

fixtures:
    - ConfigFixture

defaults:
  request_headers:
    # User foobar
    authorization: "basic Zm9vYmFyOg=="
    content-type: application/json

tests:

# Retrieve the empty list when there are no archive policies.
# NOTE(chdent): This demonstrates what used to be considered a
# security bug in JSON output:
# http://flask.pocoo.org/docs/0.10/security/#json-security
# The version described there is supposed to be fixed in most modern
# browsers but there is a new version of the problem which is only
# fixed in some:
# http://haacked.com/archive/2009/06/25/json-hijacking.aspx/
# The caveats point out that this is only an issue if your data is
# sensitive, which in this case...?
# However, the api-wg has made it recommendation that collections
# should be returned as an object with a named key with a value of
# a list as follows: {"archive_policies": [...]}
# This allows for extensibility such as future support for pagination.
# Do we care?

    - name: empty archive policy list
      GET: /v1/archive_policy
      response_headers:
          content-type: /application/json/
      response_strings:
          - "[]"

    - name: empty list text
      GET: /v1/archive_policy
      request_headers:
          accept: text/plain
      status: 406

    - name: empty list html
      GET: /v1/archive_policy
      request_headers:
          accept: text/html
      status: 406

# Fail to create an archive policy for various reasons.

    - name: wrong content type
      POST: /v1/archive_policy
      request_headers:
          content-type: text/plain
          # User admin
          authorization: "basic YWRtaW46"
      status: 415
      response_strings:
          - Unsupported Media Type

    - name: wrong method
      PUT: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      status: 405

    - name: wrong authZ
      POST: /v1/archive_policy
      data:
          name: medium
          definition:
              - granularity: 1 second
      status: 403

    - name: missing authZ
      POST: /v1/archive_policy
      request_headers:
        authorization: ""
      data:
          name: medium
          definition:
              - granularity: 1 second
      status: 401

    - name: bad request body
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
          accept: application/json
      data:
          cowsay: moo
      status: 400
      response_json_paths:
        $.description.cause: "Invalid input"
        $.description.reason: "/^extra keys not allowed/"
        $.description.detail: ["cowsay"]

    - name: missing definition
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
          accept: application/json
      data:
          name: medium
      status: 400
      response_json_paths:
        $.description.cause: "Invalid input"
        $.description.reason: "/^required key not provided/"
        $.description.detail: ["definition"]

    - name: empty definition
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
          accept: application/json
      data:
          name: medium
          definition: []
      status: 400
      response_json_paths:
          $.description.cause: "Invalid input"
          $.description.reason: "/^length of value must be at least 1/"
          $.description.detail: ["definition"]

    - name: wrong value definition
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
          accept: application/json
      data:
          name: somename
          definition: foobar
      status: 400
      response_json_paths:
        $.description.cause: "Invalid input"
        $.description.reason: "/^expected a list/"
        $.description.detail: ["definition"]

    - name: useless definition
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
          accept: application/json
      data:
          name: medium
          definition:
              - cowsay: moo
      status: 400
      response_json_paths:
        $.description.cause: "Invalid input"
        $.description.reason: "/^extra keys not allowed/"
        $.description.detail: ["definition", '0', "cowsay"]

# Create a valid archive policy.

    - name: create archive policy
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          name: medium
          definition:
              - granularity: 1 second
                points: 20
              - granularity: 2 second
      response_headers:
          location: $SCHEME://$NETLOC/v1/archive_policy/medium
      status: 201

# Retrieve it correctly and then poorly

    - name: get archive policy
      GET: $LOCATION
      response_headers:
          content-type: /application/json/
      response_json_paths:
          $.name: medium
          $.definition[0].granularity: "0:00:01"
          $.definition[0].points: 20
          $.definition[0].timespan: "0:00:20"
          $.definition[1].granularity: "0:00:02"
          $.definition[1].points: null
          $.definition[1].timespan: null

    - name: get wrong accept
      GET: $LAST_URL
      request_headers:
          accept: text/plain
      status: 406

# Update archive policy

    - name: patch archive policy with bad definition
      PATCH: $LAST_URL
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          definition:
              - granularity: 1 second
                points: 50
                timespan: 1 hour
              - granularity: 2 second
      status: 400
      response_strings:
          - timespan ≠ granularity × points

    - name: patch archive policy with missing granularity
      PATCH: $LAST_URL
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          definition:
              - granularity: 1 second
                points: 50
      status: 400
      response_strings:
          - "Archive policy medium does not support change: Cannot add or drop granularities"

    - name: patch archive policy with non-matching granularity
      PATCH: $LAST_URL
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          definition:
              - granularity: 5 second
                points: 20
              - granularity: 2 second
      status: 400
      response_strings:
          - "Archive policy medium does not support change: 1.0 granularity interval was changed"

    - name: patch archive policy
      PATCH: $LAST_URL
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          definition:
              - granularity: 1 second
                points: 50
              - granularity: 2 second
      status: 200
      response_json_paths:
          $.name: medium
          $.definition[0].granularity: "0:00:01"
          $.definition[0].points: 50
          $.definition[0].timespan: "0:00:50"

    - name: get patched archive policy
      GET: $LAST_URL
      response_headers:
          content-type: /application/json/
      response_json_paths:
          $.name: medium
          $.definition[0].granularity: "0:00:01"
          $.definition[0].points: 50
          $.definition[0].timespan: "0:00:50"

# Unexpected methods

    - name: post single archive
      POST: $LAST_URL
      status: 405

    - name: put single archive
      PUT: $LAST_URL
      status: 405

# Create another one and then test duplication

    - name: create second policy
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          name: large
          definition:
              - granularity: 1 hour
      response_headers:
          location: $SCHEME://$NETLOC/v1/archive_policy/large
      status: 201

    - name: create duplicate policy
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          name: large
          definition:
              - granularity: 1 hour
      status: 409
      response_strings:
          - Archive policy large already exists

# Create a unicode named policy

    - name: post unicode policy name
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          name: ✔éñ☃
          definition:
              - granularity: 1 minute
                points: 20
      status: 201
      response_headers:
          location: $SCHEME://$NETLOC/v1/archive_policy/%E2%9C%94%C3%A9%C3%B1%E2%98%83
      response_json_paths:
          name: ✔éñ☃

    - name: retrieve unicode policy name
      GET: $LOCATION
      response_json_paths:
          name: ✔éñ☃

    - name: post small unicode policy name
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          name: æ
          definition:
              - granularity: 1 minute
                points: 20
      status: 201
      response_headers:
          location: $SCHEME://$NETLOC/v1/archive_policy/%C3%A6
      response_json_paths:
          name: æ

    - name: retrieve small unicode policy name
      GET: $LOCATION
      response_json_paths:
          name: æ

# List the collection

    - name: get archive policy list
      GET: /v1/archive_policy
      response_strings:
          - '"name": "medium"'
          - '"name": "large"'
      response_json_paths:
          $[?name = "large"].definition[?granularity = "1:00:00"].points: null
          $[?name = "medium"].definition[?granularity = "0:00:02"].points: null

# Delete one as non-admin

    - name: delete single archive non admin
      DELETE: /v1/archive_policy/medium
      status: 403

# Delete one

    - name: delete single archive
      DELETE: /v1/archive_policy/medium
      request_headers:
        # User admin
        authorization: "basic YWRtaW46"
      status: 204

# It really is gone

    - name: confirm delete
      GET: $LAST_URL
      status: 404

# Fail to delete one that does not exist

    - name: delete missing archive
      DELETE: /v1/archive_policy/grandiose
      request_headers:
        # User admin
        authorization: "basic YWRtaW46"
      status: 404
      response_strings:
          - Archive policy grandiose does not exist

    - name: delete archive utf8
      DELETE: /v1/archive_policy/%E2%9C%94%C3%A9%C3%B1%E2%98%83
      request_headers:
        # User admin
        authorization: "basic YWRtaW46"
      status: 204

    - name: delete missing archive utf8 again
      DELETE: /v1/archive_policy/%E2%9C%94%C3%A9%C3%B1%E2%98%83
      request_headers:
        # User admin
        authorization: "basic YWRtaW46"
      status: 404
      response_strings:
          - Archive policy ✔éñ☃ does not exist

# Add metric using the policy and then be unable to delete policy

    - name: create metric
      POST: /v1/metric
      data:
          archive_policy_name: large
      status: 201

    - name: delete in use policy
      DELETE: /v1/archive_policy/large
      request_headers:
        # User admin
        authorization: "basic YWRtaW46"
      status: 400
      response_strings:
          - Archive policy large is still in use

# Attempt to create illogical policies

    - name: create illogical policy
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          name: complex
          definition:
              - granularity: 1 second
                points: 60
                timespan: "0:01:01"
      status: 400
      response_strings:
          - timespan ≠ granularity × points

    - name: create invalid granularity policy
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
          accept: application/json
      data:
          name: complex
          definition:
              - granularity: 0
                points: 60
      status: 400
      response_json_paths:
        $.description.cause: "Invalid input"
        $.description.reason: "/^Timespan must be positive for dictionary value/"
        $.description.detail: ["definition", '0', "granularity"]

    - name: create invalid points policy
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
          accept: application/json
      data:
          name: complex
          definition:
              - granularity: 10
                points: 0
      status: 400
      response_json_paths:
        $.description.cause: "Invalid input"
        $.description.reason: "/^value must be at least 1 for dictionary value/"
        $.description.detail: ["definition", '0', "points"]


    - name: create identical granularities policy
      POST: /v1/archive_policy
      request_headers:
        # User admin
        authorization: "basic YWRtaW46"
      data:
          name: complex
          definition:
              - granularity: 1 second
                points: 60
              - granularity: 1 second
                points: 120
      status: 400
      response_strings:
          - "More than one archive policy uses granularity `1.0'"

    - name: policy invalid unit
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          name: 227d0e1f-4295-4e4b-8515-c296c47d71d3
          definition:
              - granularity: 1 second
                timespan: "1 shenanigan"
      status: 400

    - name: policy invalid aggregation method
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          name: invalid-agg-method
          aggregation_methods:
            - wtf
          definition:
              - granularity: 1 second
                timespan: 1 hour
      status: 400

    - name: create policy when granularity is larger than timespan
      POST: /v1/archive_policy
      request_headers:
        # User admin
        authorization: "basic YWRtaW46"
        accept: application/json
      data:
          name: should-have-failed
          definition:
              - granularity: 2 hour
                timespan: 1 hour
      status: 400

# Non admin user attempt

    - name: fail to create policy non-admin
      POST: /v1/archive_policy
      data:
          name: f1d150d9-02ad-4fe7-8872-c64b2bcaaa97
          definition:
              - granularity: 1 minute
                points: 20
      status: 403
      response_strings:
          - Access was denied to this resource

# Back windows

    - name: policy with back window
      POST: /v1/archive_policy
      request_headers:
        # User admin
        authorization: "basic YWRtaW46"
      data:
          name: 7720a99d-cd3b-4aa4-8a6f-935bf0d46ded
          back_window: 1
          definition:
              - granularity: 10s
                points: 20
      status: 201
      response_json_paths:
          $.back_window: 1
          $.definition[0].timespan: "0:03:20"

    - name: policy no back window
      desc: and default seconds on int granularity
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          name: 22f2b99f-e629-4170-adc4-09b65635e056
          back_window: 0
          definition:
              - granularity: 10
                points: 20
      status: 201
      response_json_paths:
          $.back_window: 0
          $.definition[0].points: 20
          $.definition[0].timespan: "0:03:20"

# Timespan, points, granularity input tests

    - name: policy float granularity
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          name: 595228db-ea29-4415-9d5b-ecb5366abb1b
          definition:
              - timespan: 1 hour
                points: 1000
      status: 201
      response_json_paths:
          $.definition[0].points: 1000
          $.definition[0].granularity: "0:00:03.600000"
          $.definition[0].timespan: "1:00:00"

    - name: policy float timespan
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          name: 6bc72791-a27e-4417-a589-afc6d2067a38
          definition:
              - timespan: 1 hour
                granularity: 7s
      status: 201
      response_json_paths:
          $.definition[0].points: 514
          $.definition[0].granularity: "0:00:07"
          $.definition[0].timespan: "0:59:58"

    - name: policy rated
      POST: /v1/archive_policy
      request_headers:
          # User admin
          authorization: "basic YWRtaW46"
      data:
          name: 595228db-ea29-4415-9d5b-ecb5366abb1c
          aggregation_methods:
            - rate:mean
            - rate:last
          definition:
              - timespan: 1 hour
                points: 1000
      status: 201
      response_json_paths:
          $.aggregation_methods.`sorted`:
            - rate:last
            - rate:mean
          $.definition[0].points: 1000
          $.definition[0].granularity: "0:00:03.600000"
          $.definition[0].timespan: "1:00:00"
